{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "YAGPDB CC",
	"scopeName": "source.yag",
	"patterns": [
		{
			"begin": "\\{\\{(\\-\\s)?/\\*",
			"end": "\\*/(\\s\\-)?\\}\\}",
			"name": "punctuation.section.embedded.yag",
			"contentName": "comment.block.yag"
		},
		{
			"begin": "\\{\\{(\\-\\s)?",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.embedded.yag"
				}
			},
			"end": "(\\s\\-)?\\}\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.embedded.yag"
				}
			},
			"patterns": [
				{
					"match": ":?=",
					"name": "keyword.operator.yag"
				},
				{
					"match": "\\b\\d+(\\.\\d+)?\\b",
					"name": "constant.numeric.yag"
				},
				{
					"match": "\\$\\w+|\\$?\\.\\w*",
					"name": "variable.other.yag"
				},
				{
					"match": "\\b(?:nil|true|false)\\b",
					"name": "constant.language.yag"
				},
				{
					"match": "\\b(?:if|else|range|template|block|define|w(ith|hile)|return|end|try|catch)\\b",
					"name": "keyword.control.yag"
				},
				{
					"match": "\\b(?:and|call|html|index|js|len|not|or|print(?:f|ln)?|urlquery|eq|ne|lt|le|gt|ge)\\b",
					"name": "support.function.yag"
				},
				{
					"match": "\\b((?:(?:deleteAllMessageRe|add(?:Re(?:sponseRe)?|MessageRe))action|humanize(?:Duration(?:Second|Hour)|T(?:imeSinceDay|housand))|onlineCountBot)s|(?:sendMessage(?:NoEscape)?Ret|dbDelBy)ID|(?:cancelScheduled|schedule)UniqueCC|(?:humanizeDurationMinut|currentUserAgeMinut|reFindAllSubmatch|db(?:Bottom|Top)Entri)es|(?:(?:deleteMessageReac|toDura)tio|currentUserAgeHuma|roundEve|jso|nou)n|jsonToSdict|unpinMessage|send(?:Message(?:NoEscape)?|Template)|(?:d(?:(?:bGetPatternRever|eleteRespon)s|bSetExpir)|(?:(?:targetH|h)as|mention|remove|take|give|add)RoleNam|mentionEveryon|edit(?:ChannelN|Nickn)am|mentionHer|(?:curren|forma)tTim|getMessag|adjectiv|(?:reRepla|sli)c|shuffl|newDat|toRun|toByt|cslic|titl)e|editMessageNoEscape|c(?:omplexMessageEdit|urrentUserCreated|embed)|e(?:ditChannelTopic|xec(?:Admin|CC|Template))|(?:targetH|h)asRoleID|complexMessage|s(?:e(?:nd(?:Template)?DM|q)|leep|ub)|d(?:eleteMessage|b(?:Get(?:Pattern)?|Del|Set))|(?:s(?:(?:tructToS)?dic|qr)|dbCoun|randIn|toFloa|dic|mul)t|mentionRoleID|p(?:a(?:st(?:Nick|User)name|rseArg)s|ow)|(?:deleteTrigg|getMemb|low)er|removeRoleID|onlineCount|targetHasPermissions|getTargetPermissionsIn|e(?:ditMessage|xec)|takeRoleID|g(?:iveRoleID|et(Channel(OrThread|Pins)?|PinCount|Thread|Role))|snowflakeToTime|timestampToTime|weekNumber|loadLocation|(?:roundFloo|joinSt|dbInc)r|r(?:eFind(?:All)?|ound)|roleAbove|setRoles|addRoleID|roundCeil|u(?:rlescape|serArg|pper)|str|(?:toStrin|car)g|toInt(?:64)?|kindOf|(?:inFol|mo)d|split|fdiv|add|div|log|in|mathConst|bitWise(And|(And)?Not|Xor|Or|(Left|Right)Shift)|cbrt|re(Split|QuoteMeta)|dbDelMultiple|dbRank|sort|hasPrefix|hasSuffix|createTicket)\\b",
					"name": "support.class.yag"
				},
				{
					"begin": "\"",
					"end": "\"",
					"name": "string.quoted.double.yag",
					"patterns": [
						{
							"include": "#string_placeholder"
						},
						{
							"include": "#string_escaped_char"
						}
					]
				},
				{
					"begin": "'",
					"end": "'",
					"name": "string.quoted.single.yag",
					"patterns": [
						{
							"include": "#string_placeholder"
						},
						{
							"include": "#string_escaped_char"
						}
					]
				},
				{
					"begin": "`",
					"end": "`",
					"name": "string.quoted.other.yag",
					"patterns": [
						{
							"include": "#string_placeholder"
						}
					]
				},
				{
					"begin": "```",
					"end": "```",
					"name": "string.quoted.raw.yag",
					"patterns": [
						{
							"include": "#string_placeholder"
						}
					]
				}
			]
		}
	],
	"repository": {
		"string_escaped_char": {
			"patterns": [
				{
					"match": "\\G(\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})|.)(?=')",
					"name": "constant.character.escape.yag"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unknown-escape.yag"
				}
			]
		},
		"string_placeholder": {
			"patterns": [
				{
					"match": "(?x)%\n                        (\\d+\\$)?                                    # field (argument #)\n                        [#0\\- +']*                                  # flags\n                        [,;:_]?                                     # separator character (AltiVec)\n                        ((-?\\d+)|\\*(-?\\d+\\$)?)?                     # minimum field width\n                        (\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?                # precision\n                        [diouxXDOUeEfFgGaAcCsSqpnvtTbyYhHmMzZ%]     # conversion type\n                    ",
					"name": "constant.other.placeholder.yag"
				},
				{
					"match": "%",
					"name": "invalid.illegal.placeholder.yag"
				}
			]
		}
	}
}
